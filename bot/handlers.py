from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards import get_mode_keyboard
from bot.api_client import analyze_text_via_api
router = Router()

class AnalysisStates(StatesGroup):
    waiting_for_mode = State()
    waiting_for_text_sentiment = State()
    waiting_for_text_emotion = State()

SENTIMENT_EMOJI = {
    "–ø–æ–∑–∏—Ç–∏–≤": "üòä",
    "–Ω–µ–≥–∞—Ç–∏–≤": "üò¢",
    "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ": "üòê"
}

EMOTION_EMOJI = {
    "—Ä–∞–¥–æ—Å—Ç—å": "üòÑ",
    "–≥—Ä—É—Å—Ç—å": "üò¢",
    "–∑–ª–æ—Å—Ç—å": "üò†",
    "—Å—Ç—Ä–∞—Ö": "üò®",
    "–ª—é–±–æ–≤—å": "‚ù§Ô∏è",
    "—É–¥–∏–≤–ª–µ–Ω–∏–µ": "üò≤"
}


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞.\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_mode_keyboard()
    )
    await state.set_state(AnalysisStates.waiting_for_mode)


@router.message(Command("help"))
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    await message.answer(
        "üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:\n"
        "   ‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ–∑–∏—Ç–∏–≤/–Ω–µ–≥–∞—Ç–∏–≤/–Ω–µ–π—Ç—Ä–∞–ª)\n"
        "   ‚Ä¢ üòä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π (—Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, –∑–ª–æ—Å—Ç—å –∏ —Ç.–¥.)\n\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
        parse_mode="Markdown",
        reply_markup=get_mode_keyboard()
    )


@router.message(F.text == "üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
async def mode_sentiment(message: Message, state: FSMContext):
    await message.answer(
        "üìä **–†–µ–∂–∏–º: –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, "
        "–∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–ø–æ–∑–∏—Ç–∏–≤/–Ω–µ–≥–∞—Ç–∏–≤/–Ω–µ–π—Ç—Ä–∞–ª):",
        parse_mode="Markdown"
    )
    await state.set_state(AnalysisStates.waiting_for_text_sentiment)


@router.message(F.text == "üòä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π")
async def mode_emotion(message: Message, state: FSMContext):
    await message.answer(
        "üòä **–†–µ–∂–∏–º: –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π**\n\n"
        "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç **–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ**, "
        "–∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —ç–º–æ—Ü–∏—é (—Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, –∑–ª–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ö, –ª—é–±–æ–≤—å, —É–¥–∏–≤–ª–µ–Ω–∏–µ):",
        parse_mode="Markdown"
    )
    await state.set_state(AnalysisStates.waiting_for_text_emotion)


@router.message(AnalysisStates.waiting_for_text_sentiment)
async def analyze_sentiment(message: Message, state: FSMContext):
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...")
    
    try:
        result = await analyze_text_via_api(message.text, mode="sentiment")
        
        emoji = SENTIMENT_EMOJI.get(result['result'], "ü§î")
        score_percent = int(result['score'] * 100)
        
        response = (
            f"{emoji} **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:**\n\n"
            f"üìä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: **{result['result'].capitalize()}**\n"
            f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{score_percent}%**\n\n"
            f"_–í–∞—à —Ç–µ–∫—Å—Ç:_ _{message.text}_"
        )
        
        await message.answer(response, parse_mode="Markdown", reply_markup=get_mode_keyboard())
        await state.set_state(AnalysisStates.waiting_for_mode)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º.",
            reply_markup=get_mode_keyboard()
        )
        await state.set_state(AnalysisStates.waiting_for_mode)


@router.message(AnalysisStates.waiting_for_text_emotion)
async def analyze_emotion(message: Message, state: FSMContext):
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–º–æ—Ü–∏–∏...")
    
    try:
        result = await analyze_text_via_api(message.text, mode="emotion")
        
        emoji = EMOTION_EMOJI.get(result['result'], "ü§î")
        score_percent = int(result['score'] * 100)
        
        response = (
            f"{emoji} **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π:**\n\n"
            f"üòä –≠–º–æ—Ü–∏—è: **{result['result'].capitalize()}**\n"
            f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{score_percent}%**\n\n"
            f"_–í–∞—à —Ç–µ–∫—Å—Ç:_ _{message.text}_"
        )
        
        await message.answer(response, parse_mode="Markdown", reply_markup=get_mode_keyboard())
        await state.set_state(AnalysisStates.waiting_for_mode)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º.",
            reply_markup=get_mode_keyboard()
        )
        await state.set_state(AnalysisStates.waiting_for_mode)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def unknown_message(message: Message):
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É ü§î\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help",
        reply_markup=get_mode_keyboard()
    )