import logging
from fastapi import FastAPI, HTTPException, Header, Depends
from pydantic import BaseModel
import os
from dotenv import load_dotenv
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ ml
from ml.emotion_analyzer import EmotionAnalyzer
from ml.emotion_classifier import EmotionClassifier

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('api_logs.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Sentiment & Emotion Analysis API")

# API –∫–ª—é—á –∏–∑ .env
API_KEY = os.getenv("API_KEY", "default_key")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
print("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª–∏...")

# –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—Ä—É—Å—Å–∫–∏–π)
sentiment_analyzer = EmotionAnalyzer()

# –ú–æ–¥–µ–ª—å –¥–ª—è —ç–º–æ—Ü–∏–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
emotion_analyzer = EmotionClassifier()

print("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")


# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class AnalysisRequest(BaseModel):
    text: str
    mode: str  # "sentiment" –∏–ª–∏ "emotion"


# –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞
class AnalysisResponse(BaseModel):
    mode: str
    result: str
    score: float


# –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
def verify_api_key(x_api_key: str = Header(...)):
    if x_api_key != API_KEY:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º: {x_api_key}")
        raise HTTPException(status_code=403, detail="Invalid API Key")
    return x_api_key


# –ì–ª–∞–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.post("/analyze", response_model=AnalysisResponse)
async def analyze_text(
    request: AnalysisRequest,
    api_key: str = Depends(verify_api_key)
):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ —ç–º–æ—Ü–∏–∏
    
    - **text**: —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    - **mode**: "sentiment" –∏–ª–∏ "emotion"
    """
    
    start_time = datetime.now()
    
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: mode={request.mode}, text_length={len(request.text)}")
        
        if request.mode == "sentiment":
            # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            result = sentiment_analyzer.analyze(request.text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏
            sentiment_label = result['sentiment'].split()[0]  # "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è üòä" -> "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è"
            
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–æ—Ç–æ–º
            label_map = {
                "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
                "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "–ø–æ–∑–∏—Ç–∏–≤",
                "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "–Ω–µ–≥–∞—Ç–∏–≤"
            }
            
            response = AnalysisResponse(
                mode="sentiment",
                result=label_map.get(sentiment_label, sentiment_label),
                score=round(result['confidence'] / 100, 2)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ 0-1
            )
            
        elif request.mode == "emotion":
            # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
            result = emotion_analyzer.analyze(request.text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏
            emotion_label = result['emotion'].split()[0]  # "—Ä–∞–¥–æ—Å—Ç—å üòÑ" -> "—Ä–∞–¥–æ—Å—Ç—å"
            
            response = AnalysisResponse(
                mode="emotion",
                result=emotion_label,
                score=round(result['confidence'] / 100, 2)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ 0-1
            )
            
        else:
            raise HTTPException(status_code=400, detail="Mode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'sentiment' –∏–ª–∏ 'emotion'")
        
        elapsed = (datetime.now() - start_time).total_seconds()
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed:.2f}—Å: {response.result} ({response.score})")
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/health")
async def health_check():
    return {"status": "ok", "models": ["sentiment", "emotion"]}

@app.get("/")
async def root():
    return {
        "message": "Sentiment & Emotion Analysis API",
        "endpoints": {
            "/analyze": "POST - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞",
            "/health": "GET - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞",
            "/docs": "GET - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Swagger"
        }
    }